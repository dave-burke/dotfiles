[user]
	name = Dave Burke
	email = dburke84@gmail.com
[color]
	ui = auto
[core]
	editor = vim
	# Do not change line endings in my workspace
	autocrlf = input
[merge]
	tool = vimdiff
[diff "ansible-vault"]
	textconv = ansible-vault view --vault-password-file ~/.local/share/.ansible-vault-key
	cachetextconv = false
[push]
	# Default to the remote branch with the same name as the local branch
	default = upstream
[pull]
	# Rebase the current branch after pulling instead of merging
	rebase = true
[fetch]
	prune = true
[rerere]
	# Remember how conflicts were resolved and repeat them if seen again.
	enabled = true
[pretty]
	lol = "format:%C(auto)%h %d %s %Cgreen%ad %Cblueby %an"
[alias]
	# Fixes "fatal: ref refs/remotes/origin/HEAD is not a symbolic ref"
	fixheadref = remote set-head origin --auto

	# Figure out what this repo calls the main branch.
	main = !git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4

	# Run this after a remote repo renames its master branch to 'main' (although it should work for any new branch name)
	master2main = !git fixheadref && git branch -m master $(git main) && git checkout $(git main) && git fetch origin && git branch -u origin/$(git main)

	# Display a pretty log
	lol = log --pretty=lol --date=relative

	# Show everything
	l = !git lol --graph --branches --tags --remotes

	# Show only logs back to master branch
	lm = !git lol $(git main)..

	# Show only logs back to upstream branch
	lu = !git lol @{upstream}..

	# Show the last n commits
	l10 = !git l -n 10
	l20 = !git l -n 20

	# Review commit diffs in chronological order
	review = log -p --reverse

	# Shortcut for 'status'
	s = !git status --short --branch && git ls-files -v | grep "^[a-z]"

	# "Overview" -- Show recent logs and workspace status
	o = "!git l10; git s; git stash list"

	# Print changes to a text file. Usage: git patch master
	patch = format-patch --patience --stdout

	# -v = "verbose". shows the diff in the commit message prompt.
	c = commit -v

	# "Commit All" to automatically stage all changes (only modified files, not new files)
	ca = commit -a -v

	# "Commit (with) Message". Usage: git cm "My commit message"
	cm = commit -m

	# "Commit All (with) Message". Combines the previous two.
	cam = commit -a -m

	# Combine the staged changes with the previous commit without prompting to edit the message.
	fixup = commit --amend --no-edit

	# Reword a commit, but show the diff. Beware if you've got new stuff staged.
	reword = commit --amend --verbose

	# Stop tracking a file
	forget = update-index --assume-unchanged

	# Start tracking a file
	remember = update-index --no-assume-unchanged

	# Check Out an existing branch
	co = checkout

	# "New Branch" to create a new branch and immediately switch to it.
	nb = checkout -b

	# "Join Branch" to merge without fast-forward
	jb = merge --no-ff

	# "Join Branch (with) Message" to merge without fast-forward and specify the message
	jbm = merge --no-ff -m

	# "Merge into Master"
	mm = "!ORIG_BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout $(git main) && git pull && git merge --no-ff ${ORIG_BRANCH} && git push && git branch -D ${ORIG_BRANCH} && git push origin :${ORIG_BRANCH}"

	# "Merge into Master Fast-Forward"
	mmff = "!ORIG_BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout $(git main) && git pull && git merge --ff-only ${ORIG_BRANCH} && git push && git branch -D ${ORIG_BRANCH} && git push origin :${ORIG_BRANCH}"

	# Push the current branch upstream
	pushnew = !git push -u origin $(git rev-parse --abbrev-ref HEAD)

	# Prune local merged branches
	localprune = !git branch --no-color --merged $(git main) | grep -v $(git main) | xargs -r git branch -d

	# Shorthand for diff. Shows what has changed, but is *not* staged for commit.
	d = diff

	# "Diff Staged" to show what is about to be committed.
	ds = diff --staged

	# "ReBase Upstream" to clean up history before pushing to a remote.
	rbu = rebase -i @{upstream}

	# "ReBase master" to clean up history before merging into master.
	rbm = !git rebase -i $(git main)

	# "Pull Master and Rebase" to rebase your branch on master
	pmr = "!ORIG_BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout $(git main) && git pull && git rebase $(git main) ${ORIG_BRANCH}"

	# Pull Master from another branch
	pm = "!ORIG_BRANCH=$(git rev-parse --abbrev-ref HEAD); git checkout $(git main) && git pull && git checkout ${ORIG_BRANCH}"

	# Pull Master and Prune
	pmp = !git checkout $(git main) && git pull && git localprune

	# Force push with lease
	pushf = push --force-with-lease

	pr = !xdg-open `git remote get-url origin | sed 's|com:|com/|' | sed 's|git@|https://|' | sed 's|\\.git||'`/pull/new/$(git rev-parse --abbrev-ref HEAD)

	# Reset to wherever HEAD was prior to the last command, to recover from a mistake.
	back = reset --hard HEAD@{1}

	# Initialize a new repository and commit all existing files.
	initc = !git init && git add -A . && git commit --allow-empty -m 'Initial commit'.
[github]
	user = dave-burke
[credential]
	username = dave-burke
	helper = cache
[init]
	defaultBranch = main
[protocol "file"]
	allow = always
