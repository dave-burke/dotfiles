[user]
	name = Dave Burke
	email = dburke84@gmail.com
[color]
	ui = auto
[core]
	editor = vim
	# Do not change line endings in my workspace
	autocrlf = input
[merge]
	tool = vimdiff
[push]
	# Default to the remote branch with the same name as the local branch
	default = simple
[pull]
	# Rebase the current branch after pulling instead of merging
	rebase = true
[fetch]
	prune = true
[rerere]
	# Remember how conflicts were resolved and repeat them if seen again.
	enabled = true
[alias]
	# Display a pretty log
	l = log --graph --branches --tags --remotes --pretty=format:'%C(auto)%h %d %s %Cgreen%ad %Cblueby %an (%ae)' --date=relative

	# Show only logs back to upstream branch
	lm = !git l master..HEAD

	# Show only logs back to upstream branch
	lu = !git l @{upstream}..HEAD

	# "Overview" -- Show recent logs and workspace status
	o = !(git l -n 20) && git status && git stash list

	# Shortcut for 'status'
	s = status --short --branch

	# Print changes to a text file. Usage: git patch master
	patch = format-patch --patience --stdout

	# -v = "verbose". shows the diff in the commit message prompt.
	c = commit -v

	# "Commit All" to automatically stage all changes (only modified files, not new files)
	ca = commit -a -v

	# "Commit (with) Message". Usage: git cm "My commit message"
	cm = commit -m

	# "Commit All (with) Message". Combines the previous two.
	cam = commit -a -m

	# Combine the staged changes with the previous commit without prompting to edit the message.
	fixup = commit --amend --no-edit

	# "New Branch" to create a new branch and immediately switch to it.
	nb = checkout -b

	# "Join Branch" to merge without fast-forward
	jb = merge --no-ff

	# "Join Branch (with) Message" to merge without fast-forward and specify the message
	jbm = merge --no-ff -m

	# Shorthand for diff. Shows what has changed, but is *not* staged for commit.
	d = diff

	# "Diff Staged" to show what is about to be committed.
	ds = diff --staged

	# "ReBase Upstream" to clean up history before pushing to a remote.
	rbu = rebase -i @{upstream}
	#
	# "ReBase master" to clean up history before merging into master.
	rbm = rebase -i master

	# Reset to wherever HEAD was prior to the last command, to recover from a mistake.
	back = reset --hard HEAD@{1}

	# Initialize a new repository and commit all existing files.
	initc = !git init && git add -A . && git commit -m 'Initial commit'.
[github]
	user = dave-burke
[credential]
	username = dave-burke
	helper = cache
