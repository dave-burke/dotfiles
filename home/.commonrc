# Set default editor
export EDITOR=vim

#Manage dir history
DIRSTACKSIZE=20
alias dh='dirs -v'

#Midnight Commander skin
export MC_SKIN="$HOME/.config/mc/lib/mc-solarized-skin/solarized.ini"

#Colors
if [[ -f ~/.dir_colors ]]; then
	eval `dircolors ~/.dir_colors`
fi

# SSH Agent
if command -v ssh-agent > /dev/null; then
	if ! pgrep -u "$USER" ssh-agent > /dev/null; then
		rm -f "$XDG_RUNTIME_DIR/ssh-agent.env"
		ssh-agent > "$XDG_RUNTIME_DIR/ssh-agent.env"
	fi
	if [[ ! "$SSH_AUTH_SOCK" || ! "$SSH_AGENT_PID" ]]; then
		eval "$(<"$XDG_RUNTIME_DIR/ssh-agent.env")" > /dev/null
	fi
fi

# Paths
function addPath {
	local newPath="${1}"

	if [ -d "${newPath}" ]; then
		if ! echo "${PATH}" | grep -q "${newPath}"; then
			PATH="${PATH}:${newPath}"
		fi
	fi
}

addPath "${HOME}/bin"
addPath "${HOME}/.local/bin"
addPath "${HOME}/.local/share/npm-packages/bin"
addPath "/opt/bin"
if command -v ruby > /dev/null; then
	export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
	addPath "${GEM_HOME}/bin"
fi

if [ -z "${JAVA_HOME}" ]; then
	if [ -s "/usr/lib/jvm/default" -a -z "${JAVA_HOME}" ] ; then
		export JAVA_HOME="/usr/lib/jvm/default"
	fi
fi

export CDPATH="${CDPATH:-.}:/run/media/${USER}:${HOME}"

#Functions
if ! command -v watch > /dev/null; then
	# Implement a simple replacement
	function watch {
		if ! command -v ${1}; then
			echo "Nothing to watch"
			return
		else
			while true; do
				clear
				${@}
				sleep 2
			done
		fi
	}
fi
function findvim {
	find -iname "$1" -exec vim -p {} +
}

function grepvim {
	# Only works for filenames without spaces. Boo!
	vim -p $(grep -rliI $@)
}

function swap {
	if [[ ! -f "${1}" ]]; then
		echo "${1} is not a file"
		return
	fi
	if [[ ! -f "${2}" ]]; then
		echo "${2} is not a file"
		return
	fi
	if [[ -f "tmp" ]]; then
		echo "tmp exists"
		return
	fi
	cp "${1}" tmp
	cp "${2}" "${1}"
	cp tmp "${2}"
	rm tmp
}

function findgrep {
	if [ $# -lt 2 ]; then
		echo Wrong number of arguments.
		return
	fi
	local findPattern=${1}
	local grepPattern=${2}
	shift 2
	if [ $# -gt 0 ]; then
		grepArgs=$@
	else
		grepArgs="-iH"
	fi

	find -maxdepth 1 -mindepth 1 -type f -iname "${findPattern}" -print0 | xargs -0 -n 1 -P 3 grep ${grepArgs} "${grepPattern}"
	find -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 -n 1 -P 2 -I{} find {} -type f -iname "${findPattern}" -print0 | xargs -0 -n 1 -P 2 grep ${grepArgs} "${grepPattern}"
}

function odsgrep {
	for f in *.ods; do
		unzip -p $f content.xml | xmllint --format - | grep $@
		if [[ $? -eq 0 ]]; then
			echo $f
		fi
	done
}

function mount_fat {
	sudo mount -v -t vfat -o umask=0022,uid=$(id -u),gid=$(id -g) "${1}" "${2}"
}

function up {
	if [[ $# -eq 0 ]]; then
		cd ..
	fi
	local target="${1}"
	local saved="$(pwd)"
	local dir
	#pushd "${saved}" >> /dev/null
	if command -v unsetopt >> /dev/null; then
		unsetopt autopushd
	fi
	if [[ "${target}" =~ ^[0-9]+$ ]]; then
		for i in `seq -s ' ' 1 ${target}`; do
			builtin cd ..
		done
	else
		# The grep line here is useful for getting to any project root regardless of
		# the project name, e.g. `up .git` to go up to the first directory containing
		# a .git directory. That means this won't work quite right if you are trying
		# to go up to a directory that contains a subdir of the same name, but that's
		# not very common.
		while [[ "${dir##*/}" != "${target}" ]] && ! ls -1A | grep -q "^${target}\$"; do
			if [[ "${dir}" == "/" ]]; then
				echo "Could not find parent directory '${target}'"
				builtin cd "${saved}"
				break;
			fi
			builtin cd ..
			dir="$(pwd)"
		done
	fi
	pushd . >> /dev/null
	if command -v setopt >> /dev/null; then
		setopt autopushd
	fi
}

function down {
	local locator="${1}"
	local result=$(find . -name "${locator}" | head -n 1)
	if [[ -f "${result}" ]]; then
		result="$(dirname "${result}")"
	fi
	if [[ -d "${result}" ]]; then
		cd "${result}"
	else
		(>&2 echo "No subdirectory found for ${locator}")
	fi
}

alias cprv='rsync --recursive --perms --owner --group --backup-dir=/tmp/rsync --rsh /dev/null --human-readable --progress --'
function cpv {
	command -v pv > /dev/null
	if [[ $? -ne 0 ]]; then
		rsync --recursive --perms --owner --group --backup-dir=/tmp/rsync --rsh /dev/null --human-readable --progress -- $@
	else
		if [[ $# == 0 ]]; then
			echo "missing file operand"
			return
		elif [[ $# == 1 ]]; then
			echo "missing destination file operand after '${1}'"
			return
		fi

		local destination="${@: -1}"
		if [[ ! -e "${destination}" && $# > 2 ]]; then
			echo "target '${destination}' is not a directory"
			return
		fi

		if [[ -e "${destination}" && ! -d "${destination}" ]]; then
			echo "file exists: '${destination}'"
			return
		fi

		local a
		for a in "${@}"; do
			if [[ "${a}" != "${destination}" ]]; then
				if [[ -d "${a}" ]]; then
					#Fall back on rsync. Someday I'll sort this out.
					rsync --recursive --perms --owner --group --backup-dir=/tmp/rsync --rsh /dev/null --human-readable --progress -- "${a}" "${destination}"
				elif [[ -f "${a}" ]]; then
					if [[ -d "${destination}" ]]; then
						local target="${destination}/$(basename "${a}")"
					else
						local target="${destination}"
					fi
					if [[ -e "${target}" ]]; then
						echo "target exists: '${target}'"
					else
						pv -N "${a}" "${a}" > "${target}"
						if [[ $? -eq 0 ]]; then
							chmod --reference "${a}" "${target}"
							chown --reference "${a}" "${target}"
						fi
					fi
				else
					echo "${a} is not a normal file."
				fi
			fi
		done
	fi
}

command -v tree > /dev/null || alias tree='find -not -name ".*"'

function scpv {
	local output="${@: -1}"
	echo "last arg is ${output}"
	set -- "${@:1:$#-1}" # Doesn't work in zsh. Hmm.
	echo "the other args are ${@}"
}

# Misc Config
export LESS='--quit-if-one-screen --ignore-case --status-column --LONG-PROMPT --RAW-CONTROL-CHARS --HILITE-UNREAD --tabs=4 --no-init --window=-4'
# Set colors for less. Borrowed from https://wiki.archlinux.org/index.php/Color_output_in_console#less .
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline

#Aliases
command -v truecrypt > /dev/null || alias truecrypt=realcrypt
alias ls='ls --color=auto'
alias l='ls'
alias la='ls -a'
alias ll='ls -lh'
alias lah='ls -lah'
alias diff='diff -u'
alias treed='tree -d'
alias wgetp='wget --page-requisites --adjust-extension --span-hosts --convert-links --backup-converted'
alias grep='grep --exclude-dir=.git'
alias disks='ls /dev/disk/by-label'
alias gw='./gradlew'
alias fehg='feh -g 800x600'
alias pse='ps -e | grep -i'
alias dps="docker ps -a --format '{{.ID}}~{{.Names}}~{{.Image}}~{{.Status}}' | column -s '~' -t"
alias todo='todo.sh'
alias notes='vim ~/docs/notes/inbox.md'

# GPG doesn't list keys in your keyring for some reason.
alias gpg-recipients='gpg --list-only --no-default-keyring --secret-keyring /dev/null'

#for gnu screen
function s {
	if [[ -z $1 ]]; then
		screen -ls 2> /dev/null || echo "[No sessions]"
	else
		screen -r $@ 2> /dev/null || screen -S $@
	fi
}

#for tmux
alias tmux='tmux -2' #Use 256 colors
function t {
	if [[ -z $1 ]]; then
		tmux ls 2> /dev/null || echo "[No sessions]"
	else
		tmux attach -t $@ 2> /dev/null
		if [[ $? -ne 0 ]]; then
			tmux new -s $@
		fi
	fi
}

# Use nice utilities if you have them
if command -v bat > /dev/null; then
	alias cat=bat
fi
if command -v nvim > /dev/null; then
	alias vim=nvim
fi
if command -v mosh > /dev/null; then
        alias ssh=mosh
fi

[[ -f ~/.localrc ]] && source ~/.localrc

